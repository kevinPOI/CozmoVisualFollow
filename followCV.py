from cozmo_fsm import *
from yoloDetect import *
import time
import numpy as np
import cv2
from opencv_object_tracker import *
c = 0
img_cache = np.zeros([240,320,3])
cache_turn = 0

# Create tracker object


# Initialize the tracker with the first frame and the bounding box


class GetTurn(StateNode):
    def __init__(self):
        super().__init__()
        
    def start(self, event=None):
        super().start(event)
        turn = 0
        turn = detect(img_cache)
        turn *= -0.5
        self.post_data(cozmo.util.Angle(turn))

class GetCurve(StateNode):
    def __init__(self):
        super().__init__()
        self.firsttime = True
        self.tracker = None
        
    def start(self, event=None):
        super().start(event)
        global img_cache
        if self.firsttime:
            self.tracker = cv_init(img_cache)
            print("fsm40")
            
            print("fsm31")
            self.firsttime = False
            self.post_data([0,0])
        else:
            print("running ese else")
            speed = 50
            diff = 35
            
            turn = cv_detect(img_cache, self.tracker)
            print("turn is: ", turn)

            left = turn * diff + speed
            right = -turn * diff + speed
            print("getcurve completed")
            self.post_data([left, right])
            

# class InitCV(StateNode):
#     def __init__(self):
#         super().__init__()
#     def start(self, event=None):
#         global img_cache

#         tracker = cv_init(img_cache)
#         print("fsm40")
#         super().start(event)

# class Query2(StateNode):
#     def __init__(self, text):
#         super().__init__()
#         self.text = text
#     def start(self, event):
#         world_list = str(self.robot.world.world_map.objects)
#         premise_w = world_list.replace(">,", "\n")
#         #print(self.robot.world.world_map.objects)
#         if isinstance(event, TextMsgEvent):
#             self.text = event.string
#         query_gpt(self.text, premise_w)
#         super().start()
# class ClearCache(StateNode):
#     def __init__(self):
#         super().__init__()
#     def start(self, event=None):
#         global messages_cache
#         messages_cache = []
#         print("cached cleared, enter tm to move on")
#         super().start()

class followCV(StateMachineProgram):
    # setup{
    #     start: ClearCache() =TM=> query: Query("Is cube2 sideways?") 
    #     =TM=> Query("ow many cubes are there?")
    # =TM=> Query("What is the distance between cube1 and cube2?")
    # =TM=> Query("Which cube is closest to cube1?")
    # =TM=> Query("Please remember that all cubes are 45 mm on a side.") 
    # =TM=> Query("How big is cube1?") 
    # =TM=> Query("What is the volume of cube3?") 
    
    # }
    def user_image(self,image,gray):
        self.robot.myimage = gray
        
        global c
        global img_cache
        img_cache = image
        c += 1
        if c == 3:
            c = 0

    
    # setup{
    #     ColorImageEnabled() =C=> getTurn: GetTurn() =D=> DriveWheel =C=> getTurn
    # }
    def setup(self):
        #         ColorImageEnabled() =C=> StateNode() =T(1)=> getCurve: GetCurve()  =D=> DriveWheels(6,6) =T(0.7)=> getCurve
        
        # Code generated by genfsm on Wed Apr 24 17:40:04 2024:
        
        colorimageenabled1 = ColorImageEnabled() .set_name("colorimageenabled1") .set_parent(self)
        statenode1 = StateNode() .set_name("statenode1") .set_parent(self)
        getCurve = GetCurve() .set_name("getCurve") .set_parent(self)
        drivewheels1 = DriveWheels(6,6) .set_name("drivewheels1") .set_parent(self)
        
        completiontrans1 = CompletionTrans() .set_name("completiontrans1")
        completiontrans1 .add_sources(colorimageenabled1) .add_destinations(statenode1)
        
        timertrans1 = TimerTrans(1) .set_name("timertrans1")
        timertrans1 .add_sources(statenode1) .add_destinations(getCurve)
        
        datatrans1 = DataTrans() .set_name("datatrans1")
        datatrans1 .add_sources(getCurve) .add_destinations(drivewheels1)
        
        timertrans2 = TimerTrans(0.7) .set_name("timertrans2")
        timertrans2 .add_sources(drivewheels1) .add_destinations(getCurve)
        
        return self
